import chain from './util/chain';

class BaseTransition {
    constructor(params){
        /**
         * The parent scene
         */
        this.scene = params.scene;

        /**
         * The targets of this transition effect
         */
        this._targets = params.targets || [];

        /**
         * Default config, defined in child class
         */
        this._defaults = params.defaults || {};

        /**
         * The user-defined settings merged w/ the transition defaults
         */
        this._config = Object.assign({}, params.defaults || {} , params.config || {});

        /**
         * The enter/exit config is a function which is called before every "enter" 
         * or "exit" transition and returns an updated tween based on the current 
         * state of the user-defined config object.
         */
        this._enterConfig = params.enterConfig;
        this._exitConfig = params.exitConfig;

        /**
         * An array of strings denoting properties that this transition will 
         * modify, and therefore may require reset.
         */
        this._affectedProps = params.affectedProps || [];

        /**
         * An array of objects w/ key/value pairs to be reassigned as properties
         * when resetProps() is called
         */
        this._cachedProps = this._cacheProps(this._targets, this._affectedProps);

        /**
         * Flag denoting whether this transition is active
         */
        this.isTransitioning = false;
    }

    /**
     * Update the configuration for this transition. Any unset properties will
     * be resolved to their defaults or settings from a previously set configuration.
     * 
     * @param {Object} config - An object defining transition configurations,
     * such as duration, chain, etc.
     */
    setConfig(newConfig = {}){
        //Assign in order: Empty <-- Config Defaults <-- Previous Config <-- New Config
        this._config = Object.assign({}, this._defaults, this._config, newConfig);
    }

    enter(userConfig){
        if (this.isTransitioning) return;
        this.isTransitioning = true;

        /**
         * Update the config if necessary
         */
        if (userConfig != null) this.setConfig(userConfig);

        /**
         * Reset the props BEFORE the enter transition (or else it will use the 
         * properties of each target as they were AFTER exiting)
         */
        this.resetProps();

        /**
         * Get the updated tween config from the child class and begin the 
         * transition
         */
        var tweenConfig = this._enterConfig(this.scene, this._config);
        return chain(this.scene, this._targets, tweenConfig).then(() => {
            this.isTransitioning = false;
        });
    }

    exit(userConfig){
        if (this.isTransitioning) return;
        this.isTransitioning = true;

        /**
         * Update the config if necessary
         */
        if (userConfig != null) this.setConfig(userConfig);

        /**
         * Get the updated tween config from the child class and begin the 
         * transition
         */
        var tweenConfig = this._exitConfig(this.scene, this._config);
        return chain(this.scene, this._targets, tweenConfig).then(() => {
            this.isTransitioning = false;
        });
    }

    /**
     * Stores key/value pairs for a given list of GameObjects and props for 
     * later use
     * 
     * @param {Array} targets - An array of GameObject targets
     * @param {Array} props - An array of strings denoting properties for the
     * targets. The value of these properties will be cached.
     */
    _cacheProps(targets, props){
        let propsCache = [];
        targets.forEach(target => {

            let targetCache = {};
            props.forEach(prop => {
                targetCache[prop] = target[prop];
            });

            propsCache.push(targetCache);

        });

        return propsCache;
    }

    /**
     * Resets
     * 
     * @param {Array} targets - An array of GameObject targets
     * @param {Array} cachedProps - An array of props generated by _cacheProps()
     */
    resetProps(){

        let targets = this._targets;
        let cachedProps = this._cachedProps;

        targets.forEach( (target, index) => {
            for (let key in cachedProps[index]){
                target[key] = cachedProps[index][key];
            }
        });
    }

}

export default BaseTransition;